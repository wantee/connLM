#!/usr/bin/env python

from __future__ import print_function
import argparse
import sys

parser = argparse.ArgumentParser(description="This script validates a FST "
    "generated by connlm-tofst"
    "  check-fst.py --fst-converter-log=exp/rnn/log/fst.converter.log "
    "--num-prob-sents=10 "
    "exp/rnn/words.txt exp/rnn/g.ssyms exp/rnn/g.txt",
    formatter_class=argparse.ArgumentDefaultsHelpFormatter)

parser.add_argument("--fst-converter-log", type=str, default="",
                    help="Log file written by connlm-tofst. "
                         "Check the logging informations, If specified.")
parser.add_argument("--num-prob-sents", type=int, default=0,
                    help="Number of random sentences to be sampled for "
                    "checking FST weight. Will not do this check "
                    "if it is set to be less than zero.")
parser.add_argument("word_syms", type=str, help="word symbols file.")
parser.add_argument("state_syms", type=str, help="state symbols file.")
parser.add_argument("fst_txt", type=str, help="FST file with ids for labels. "
                    "The FST must be sorted by state id.")

# echo command line to stderr for logging.
print(' '.join(sys.argv), file=sys.stderr)

args = parser.parse_args()

# load word syms
vocab = {}
with open(args.word_syms, "r") as f:
  for line in f:
    if line.strip() == '':
      continue
    fields = line.split()
    assert len(fields) == 2
    assert fields[0] != "<any>"
    vocab[fields[0]] = int(fields[1])

vocab["<any>"] = -100

# load state syms
ssyms = []
with open(args.state_syms, "r") as f:
  sid = 0
  for line in f:
    if line.strip() == '':
      continue

    fields = line.split()
    assert len(fields) <= 2
    assert int(fields[0]) == sid

    if len(fields) == 1:
      sid += 1
      continue

    ssyms.append(map(lambda x: int(vocab[x]), fields[1].split(":")))
    sid += 1

# load FST
#with open(args.fst_txt, "r") as f:
#  for line in f:
#    if line.strip() == '':
#      continue
#
#    fields = line.split()
#    assert len(fields) == 1 || len(fields) == 5
#
#    sid = int(fields[0])
#
#    if len(fields) == 1:
#      final_state = sid
#      continue
#
#    if sid == START or sid == ANY:
#      assert len(arcs) == len(vocab) - 2
#      assert [ arc[2] for arc in arcs ] == range(len(arcs))
#    else:
#      assert backoff

print("Finish to validate FST.", file=sys.stderr)

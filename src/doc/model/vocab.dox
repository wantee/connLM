//
// The MIT License (MIT)
//
// Copyright (c) 2016 Wang Jian
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

/**
  @page model_vocab The Vocabulary

  @section model_vocab_intro Introduction

  Vocabulary in connLM is used to map word strings into integer ids
  and verse vice.

  Vocabulary should be learned from data set, usually one would use
  the train corpus. After learned, the words in vocabulary is sorted by
  their counts in the corpus, this count information is necessary when
  we generating the output layer tree.

  @section model_vocab_usage Usage

  Vocabulary related source code is in vocab.h. vocab_learn() can be called
  to learn vocabulary from text. vocab_get_id() and vocab_get_word() is used
  to map between the word string and word id.

  The command line interface for learning vocabulary is
  @ref cmd_vocab "connlm-vocab".

  It consider every line in the text source as a sentence. And will
  automatically add @c \<s\> and @c \</s\> in the beginning and end of
  every sentence.

  Besides, there are several ways to control the procedure of learning.
  Available options can be passed through struct vocab_learn_opt_t:

  @code{.c}
  typedef struct _vocab_learn_opt_t_ {
      int max_vocab_size; /**< max number of words in vocab. */
      count_t max_word_num; /**< max number of words used to learn vocab. */
      int min_count; /**< min count for a word to be used in learning vocab. */
  } vocab_learn_opt_t;
  @endcode

  @c max_vocab_size specifies the maximum number of words will keep in the
  vocabulary. When it need to drop some words, we will choose the words with
  less occurrences.

  @c max_word_num controls the maximum number of words in text source will
  be used to learn vocabulary. This is useful when training large corpus,
  and one would not like to learn the vocabulary by going through the whole
  corpus.

  Finally, if @c min_count is larger than zero, the words whose count is
  less than this value will be dropped.

  All counts of the dropped words will contribute to the special
  out-of-vocabulary token, i.e., @c \<unk\>.
*/

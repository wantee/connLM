//
// The MIT License (MIT)
// 
// Copyright (c) 2015 Wang Jian
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

/**
  @page vocab The Vocabulary

  @section vocab_intro Introduction
  
  Vocabulary in connLM is used to map word strings into integer ids 
  and verse vice.

  Vocabulary should be learned from dataset, usually one would use
  the train corpus. After learned, the words in vocabulary is sorted by
  their counts in the corpus, this count information is also stored to be
  passed to output layer for generating word classes.

  @section vocab_usage Usage

  Vocabulary related source code is in vocab.h. vocab_learn can be called
  to learn vocabulary from text. vocab_get_id() and vocab_get_word() is used
  to map between the word string and word id.

  The command line interface for learning vocabulary is @c connlm-vocab,
  available options are:

  @code
$ connlm-vocab --help
Usage    : connlm-vocab [options] <train-file> <model-out>

Options  : 
  --help                     : Print help (bool, default = false)
  --log-file                 : Log file (string, default = "/dev/stderr")
  --log-level                : Log level (1-8) (int, default = 8)
  --max-alphabet-size        : Maximum size of alphabet for vocab. (int, default = 10000000)
  --max-vocab-size           : Maximum size of Vocabulary. 0 denotes no limit. (int, default = 0)
  --max-word-num             : Maximum number of words used to learn vocab. 0 denotes no limit. (ulong, default = 0)
  --min-count                : Mininum count for a word to be used in learning vocab. 0 denotes no limit. (int, default = 0)
  --binary                   : Save file as binary format (bool, default = true)
  --config                   : config file (string, default = "")
  @endcode

  @c --max-alphabet-size restrict max size of vocabulary can be
  learned.

  When training large corpus, one would not like to learn the vocabulary
  by going through the whole corpus. Thus, we can use the 
  @c --max-word-num option, which controls the 
  maximum number of words used to learn vocabulary.

  @section vocab_limited Limited Vocabulary

  The learning process can be finer controlled to support the usage of
  limited vocabulary.  

  A manually procedure to limit vocabulary could be: replace 
  the out-of-vocabulary words to a special token, like
  @c \<unk\>, and then training with the processed data.
 
  connLM comes with two different ways to avoid above preprocessing. First,
  one can restrict the size of learned vocabulary explicitly by passing
  the parameter with @c --max-vocab-size option. Second, one can specify
  a minimum occurrences for a word to be added to vocabulary, which is
  accomplished by @c --min-count option, i.e., any word occurs less than
  min-count times will be ignored. In both methods, the remaining words
  are the most frequent words.

*/
